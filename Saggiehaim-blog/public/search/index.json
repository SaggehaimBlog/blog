[{"categories":null,"content":" Hi, I’m Saggie, a Cloud Security Solution Director, a blogger and tech trainer. My experience in Microsoft systems, Security, Monitoring and, Networking help me design better projects and solutions.\nI’m motivated by my passion for troubleshooting and Powershell. Eager to keep learning every day. Improving my skill sets to better understand the constraints in every project or the challenges I face every day.\nMy hunger for knowledge and love of challenges, helped me build and execute the Enterprise Monitoring solution in Elbit systems. Where we implemented the Microsoft SCOM, monitored the entire company. This project helped raise the total uptime of the businesses applications. And to find to the root cause for common issues. I also led the troubleshooting team in the company. Helped developers and systems admins find the cause of performance and malfunction issues.\nMeanwhile, I vastly improved the security and productivity of Lumenis LTD IT. Planning and implementing vast projects as changing the entire networking. moving from flat network to full segmentation and implementing Aruba latest Wireless, Switches and NAC solutions supporting 802.1X and GRE Tunneling. Doing a complete overview of the enterprise domain environment, and providing automation solutions such as User-Life Cycle events and more.\nThese days I teach at CyberControl Academy about Operation systems, Networking, and Security Fundamentals. Working at CyberProof, and writing about IT in my blog.\nHope you enjoy my blogging! Feel free to Contact me ","permalink":"//localhost:8080/about/","tags":null,"title":"About"},{"categories":["Cloud Security","Microsoft Sentinel"],"content":"For those of you who don\u0026rsquo;t know Azure Sentinel, Azure Sentinel is a scalable, cloud-native, security information event management (SIEM) and security orchestration automated response (SOAR) solution. Azure Sentinel delivers intelligent security analytics and threat intelligence across the enterprise, providing a single solution for alert detection, threat visibility, proactive hunting, and threat response.\nThe challenge begins when you have a multi-tenancy environment to monitor, as you need to jump from one tenant to keep up with the incidents. The deployment and maintenance of Azure Sentinel content are time-consuming, and you can\u0026rsquo;t run cross workspace queries between tenants.\nBut fear not, you can use Azure Lighthouse to ease the management and operation.\nWhat is Azure Lighthouse Azure Lighthouse enables cross- and multi-tenant management, allowing for higher automation, scalability, and enhanced governance across resources and tenants.\nWith Azure Lighthouse, you can \u0026ldquo;expose\u0026rdquo; resource groups (or subscriptions) with the resources inside, in our case Azure Sentinel and Log Analytics workspaces from all of your tenants to your central management.\nThere are no additional costs associated with using Azure Lighthouse to manage Azure resources, and any Azure customer or partner can use Azure Lighthouse.\nAzure Lighthouse is also secured by design, as it delegating permissions to Users and/or groups from the central tenant to the resources in other tenants, which means you use the same account and can see and interact only with what exposed to you.\nImage of Azure Sentinel in a multi-tenant environment using Azure Lighthouse Prerequisites Before we can start, there are a few prerequisites that we need to meet:\nThis deployment must be done by a non-guest account in the customer\u0026rsquo;s tenant who has the Owner built-in role for the subscription being onboarded (or which contains the resource groups that are being onboarded) The tenant ID of the service provider\u0026rsquo;s tenant (where you will be managing the customer\u0026rsquo;s resources) The tenant ID of the customer\u0026rsquo;s tenant (which will have resources managed by the service provider) The subscription IDs for each specific subscription in the customer\u0026rsquo;s tenant that will be managed by the service provider (or that contains the resource group(s) that will be managed by the service provider). After fulfilling those prerequisites, we can continue with our guide.\nPlanning our deployment Permissions When deploying Lighthouse, we are delegating permissions to our users. planning before will save us the time later\nRole Create and Run Playbook Create and edit workbooks, analytic rules, and other Azure Sentinel resources Manage incidents (dismiss, assign etc.) View data, incidents, dashboards and other Azure Sentinel resources Azure Sentinel reader \u0026ndash; \u0026ndash; \u0026ndash; X Azure Sentinel responder \u0026ndash; \u0026ndash; X X Azure Sentinel contributor \u0026ndash; X X X Azure Sentinel contributor + Logic App contributor X X X X Role Definitions To define authorizations, you\u0026rsquo;ll need to know the ID values for each user, user group, or service principal in the service provider tenant to which you want to grant access. You\u0026rsquo;ll also need the role definition ID for each built-in role you want to assign. If you don\u0026rsquo;t have them already, you can retrieve them by running the commands below from within PowerShell:\nGet-AzRoleDefinition | select Name, ID To make it easy, here are the ID that we need:\nRole Name Role ID Reader acdd72a7-3385-48ef-bd42-f606fba81ae7 Azure Sentinel Reader 8d289c81-5878-46d4-8554-54e1e3d8b5cb Azure Sentinel Responder 3e150937-b8fe-4cfb-8069-0eaf05ecd056 Azure Sentinel Contributor ab8e14d6-4a74-4a29-9ba8-549422addade Logic App Contributor 87a39d53-fc1b-424a-814c-f7e04687dc9e Contributor b24988ac-6180-42a0-ab88-20f7382dd24c You will use it later in this guide.\nSecurity Groups To make management easier, I recommend using Azure AD security groups for each role. This gives you the flexibility to add or remove individual users to the group that has access so that you don\u0026rsquo;t have to repeat the onboarding process to make user changes. You can assign roles to a service principal, which can be useful for automation scenarios.\nI will use the following groups in this post:\nGroup Name Permissions Description Sentinel_IAC_SG Contributor Group that will hold the Service Account that will run the automation\u0026rsquo;s SOC_L1_SG Azure Sentinel Responder Group for the SOC L1 team, they usually the first to respond to security incidents SOC_L2_SG Azure Sentinel Contributor, Logic App Contributor Group for the SOC L2, the security analysts. They will deal with escalations, build detection rules and more. Executives_SG Azure Sentinel Reader Group for the executives, so they can see the security status of the organization. Optional - Deploy using PowerShell If you want to deploy the templates using PowerShell, you will first need to set up a session to Azure using PowerShell.\nHere how:\nAz Module Azure PowerShell Az module is a PowerShell module for interacting with Azure. Az offers shorter commands, improved stability, and cross-platform support.\nTo install it, you run the following command:\nInstall-Module az -AllowClobber -Scope CurrentUser Connect to Azure with PowerShell You need to get your Tenant ID and Subscription ID from the Azure Portal.\nWith this information, you can use the Connect-AzAccount to create a session with Azure:\n$TenantID = \u0026#39;XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\u0026#39; $SubscriptionID = \u0026#39;XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\u0026#39; Connect-AzAccount -TenantId $TenantID -SubscriptionId $SubscriptionID Now you can interact with Azure from PowerShell.\nDeploying Azure Log Analytics and Azure Sentinel If you don\u0026rsquo;t already have Azure Log Analytics and Azure Sentinel deployed, you will need to deploy it.\nI\u0026rsquo;ve created an ARM Template to help you with it:\n{ \u0026#34;$schema\u0026#34;: \u0026#34;https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\u0026#34;, \u0026#34;contentVersion\u0026#34;: \u0026#34;1.0.0.0\u0026#34;, \u0026#34;parameters\u0026#34;: { \u0026#34;workspaces_name\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;String\u0026#34; }, \u0026#34;retentionInDays\u0026#34;: { \u0026#34;defaultValue\u0026#34;: \u0026#34;90\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;String\u0026#34; }, \u0026#34;location\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;defaultValue\u0026#34;: \u0026#34;[resourceGroup().location]\u0026#34;, \u0026#34;metadata\u0026#34;: { \u0026#34;description\u0026#34;: \u0026#34;Location for all resources.\u0026#34; } } }, \u0026#34;variables\u0026#34;: { \u0026#34;solutions_SecurityInsights_name\u0026#34;: \u0026#34;[concat(\u0026#39;SecurityInsights(\u0026#39;,parameters(\u0026#39;workspaces_name\u0026#39;),\u0026#39;)\u0026#39;)]\u0026#34; }, \u0026#34;resources\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;[parameters(\u0026#39;workspaces_name\u0026#39;)]\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Microsoft.OperationalInsights/workspaces\u0026#34;, \u0026#34;apiVersion\u0026#34;: \u0026#34;2015-11-01-preview\u0026#34;, \u0026#34;location\u0026#34;: \u0026#34;[parameters(\u0026#39;location\u0026#39;)]\u0026#34;, \u0026#34;properties\u0026#34;: { \u0026#34;sku\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;pergb2018\u0026#34; }, \u0026#34;features\u0026#34;: { \u0026#34;searchVersion\u0026#34;: 1 }, \u0026#34;retentionInDays\u0026#34;: \u0026#34;[parameters(\u0026#39;retentionInDays\u0026#39;)]\u0026#34; } }, { \u0026#34;type\u0026#34;: \u0026#34;Microsoft.OperationsManagement/solutions\u0026#34;, \u0026#34;apiVersion\u0026#34;: \u0026#34;2015-11-01-preview\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;[variables(\u0026#39;solutions_SecurityInsights_name\u0026#39;)]\u0026#34;, \u0026#34;location\u0026#34;: \u0026#34;[parameters(\u0026#39;location\u0026#39;)]\u0026#34;, \u0026#34;dependsOn\u0026#34;: [ \u0026#34;[resourceId(\u0026#39;microsoft.operationalinsights/workspaces\u0026#39;, parameters(\u0026#39;workspaces_name\u0026#39;))]\u0026#34; ], \u0026#34;plan\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;[variables(\u0026#39;solutions_SecurityInsights_name\u0026#39;)]\u0026#34;, \u0026#34;promotionCode\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;product\u0026#34;: \u0026#34;OMSGallery/SecurityInsights\u0026#34;, \u0026#34;publisher\u0026#34;: \u0026#34;Microsoft\u0026#34; }, \u0026#34;properties\u0026#34;: { \u0026#34;workspaceResourceId\u0026#34;: \u0026#34;[resourceId(\u0026#39;microsoft.operationalinsights/workspaces\u0026#39;, parameters(\u0026#39;workspaces_name\u0026#39;))]\u0026#34;, \u0026#34;containedResources\u0026#34;: [ ] } } ] } You can deploy it using either PowerShell or Azure Portal:\nDeploy Using Azure Portal To deploy the template using Azure Portal, first navigate to Azure Portal and sign in.\nThen on the top search bar, search for \u0026ldquo;Deploy a custom template.\u0026rdquo;\nImage of Azure Portal search with a Deploy search, pointing on Deploy a Custom Template On the Custom deployment page, click on Build your own template in the editor\nImage of Azure Portal Custom deployment page Next, you will need to replace the empty template with the template I provided. The template will add the resources we want to deploy.\nImage of Azure Portal editing a template Click save when you finished.\nLast, we need to provide the info for the template. the information we will need to provide is:\nSubscription - The name of the subscription we want to deploy the resources to Resource Group - The name of the Resources group that we want to deploy the resources to (Create new if you didn\u0026rsquo;t created one) Workspaces_name - The name of the Azure Log Analytics workspace Image of Azure Portal with the deployment scope Click on Review + create to deploy the resources.\nDeploy Using PowerShell To deploy the resources using PowerShell, make sure you first have an active session with PowerShell.\nCreating a Resource group With the New-AzResourceGroup you can create a new resource group. Inside the Resource group, we will deploy the Log Analytics Workspace and Sentinel, and this is the Resource group we will delegate.\nEvery resource in Azure requires a location to be deployed to. The location is referring to the Datacenter region. In this Guide, I will use the West Europe region.\nNew-AzResourceGroup -Name \u0026#34;Sentinel-RG\u0026#34; -Location \u0026#34;WestEurope\u0026#34; You will get asked for the Log Analytics Workspace name.\nDeploying the template Because this is an ARM template deployment, We can use the New-AzResourceGroupDeployment cmdlet.\nNew-AzResourceGroupDeployment -ResourceGroupName \u0026#34;Sentinel-RG\u0026#34; -TemplateFile .\\DeploySentinel.json Deploy Azure Lighthouse To deploy Azure Lighthouse, navigate again to \u0026ldquo;Deploy a custom template.\u0026rdquo;\nOn the Custom deployment page, click on Build your own template in the editor.\nNext, you will need to replace the empty template, but this time with the following:\n{ \u0026#34;$schema\u0026#34;: \u0026#34;https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#\u0026#34;, \u0026#34;contentVersion\u0026#34;: \u0026#34;1.0.0.0\u0026#34;, \u0026#34;parameters\u0026#34;: { \u0026#34;mspOfferName\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;metadata\u0026#34;: { \u0026#34;description\u0026#34;: \u0026#34;Specify the name of the offer from the Managed Service Provider\u0026#34; } }, \u0026#34;mspOfferDescription\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;metadata\u0026#34;: { \u0026#34;description\u0026#34;: \u0026#34;Name of the Managed Service Provider offering\u0026#34; } }, \u0026#34;managedByTenantId\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;metadata\u0026#34;: { \u0026#34;description\u0026#34;: \u0026#34;Specify the tenant id of the Managed Service Provider\u0026#34; } }, \u0026#34;authorizations\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;array\u0026#34;, \u0026#34;metadata\u0026#34;: { \u0026#34;description\u0026#34;: \u0026#34;Specify an array of objects, containing tuples of Azure Active Directory principalId, a Azure roleDefinitionId, and an optional principalIdDisplayName. The roleDefinition specified is granted to the principalId in the provider\u0026#39;s Active Directory and the principalIdDisplayName is visible to customers.\u0026#34; } }, \u0026#34;rgName\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; } }, \u0026#34;variables\u0026#34;: { \u0026#34;mspRegistrationName\u0026#34;: \u0026#34;[guid(parameters(\u0026#39;mspOfferName\u0026#39;))]\u0026#34;, \u0026#34;mspAssignmentName\u0026#34;: \u0026#34;[guid(parameters(\u0026#39;rgName\u0026#39;))]\u0026#34; }, \u0026#34;resources\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;Microsoft.ManagedServices/registrationDefinitions\u0026#34;, \u0026#34;apiVersion\u0026#34;: \u0026#34;2019-06-01\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;[variables(\u0026#39;mspRegistrationName\u0026#39;)]\u0026#34;, \u0026#34;properties\u0026#34;: { \u0026#34;registrationDefinitionName\u0026#34;: \u0026#34;[parameters(\u0026#39;mspOfferName\u0026#39;)]\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;[parameters(\u0026#39;mspOfferDescription\u0026#39;)]\u0026#34;, \u0026#34;managedByTenantId\u0026#34;: \u0026#34;[parameters(\u0026#39;managedByTenantId\u0026#39;)]\u0026#34;, \u0026#34;authorizations\u0026#34;: \u0026#34;[parameters(\u0026#39;authorizations\u0026#39;)]\u0026#34; } }, { \u0026#34;type\u0026#34;: \u0026#34;Microsoft.Resources/deployments\u0026#34;, \u0026#34;apiVersion\u0026#34;: \u0026#34;2018-05-01\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;rgAssignment\u0026#34;, \u0026#34;resourceGroup\u0026#34;: \u0026#34;[parameters(\u0026#39;rgName\u0026#39;)]\u0026#34;, \u0026#34;dependsOn\u0026#34;: [ \u0026#34;[resourceId(\u0026#39;Microsoft.ManagedServices/registrationDefinitions/\u0026#39;, variables(\u0026#39;mspRegistrationName\u0026#39;))]\u0026#34; ], \u0026#34;properties\u0026#34;:{ \u0026#34;mode\u0026#34;:\u0026#34;Incremental\u0026#34;, \u0026#34;template\u0026#34;:{ \u0026#34;$schema\u0026#34;: \u0026#34;https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\u0026#34;, \u0026#34;contentVersion\u0026#34;: \u0026#34;1.0.0.0\u0026#34;, \u0026#34;parameters\u0026#34;: {}, \u0026#34;resources\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;Microsoft.ManagedServices/registrationAssignments\u0026#34;, \u0026#34;apiVersion\u0026#34;: \u0026#34;2019-06-01\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;[variables(\u0026#39;mspAssignmentName\u0026#39;)]\u0026#34;, \u0026#34;properties\u0026#34;: { \u0026#34;registrationDefinitionId\u0026#34;: \u0026#34;[resourceId(\u0026#39;Microsoft.ManagedServices/registrationDefinitions/\u0026#39;, variables(\u0026#39;mspRegistrationName\u0026#39;))]\u0026#34; } } ] } } } ], \u0026#34;outputs\u0026#34;: { \u0026#34;mspOfferName\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;[concat(\u0026#39;Managed by\u0026#39;, \u0026#39; \u0026#39;, parameters(\u0026#39;mspOfferName\u0026#39;))]\u0026#34; }, \u0026#34;authorizations\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;array\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;[parameters(\u0026#39;authorizations\u0026#39;)]\u0026#34; } } } click on save when you finished.\nOn the next page, it will ask you to fill in the parameters. Click on Edit parameters.\nImage of Azure Portal editing a template in this screen, you will need to copy the following JSON file:\n{ \u0026#34;$schema\u0026#34;: \u0026#34;https://schema.management.azure.com/schemas/2015-01-01/deploymentParameters.json#\u0026#34;, \u0026#34;contentVersion\u0026#34;: \u0026#34;1.0.0.0\u0026#34;, \u0026#34;parameters\u0026#34;: { \u0026#34;mspOfferName\u0026#34;: { \u0026#34;value\u0026#34;: \u0026#34;SOC Central Services\u0026#34; }, \u0026#34;rgName\u0026#34;: { \u0026#34;value\u0026#34;: \u0026#34;Sentinel-RG\u0026#34; }, \u0026#34;mspOfferDescription\u0026#34;: { \u0026#34;value\u0026#34;: \u0026#34;SOC Central Managed Services\u0026#34; }, \u0026#34;managedByTenantId\u0026#34;: { \u0026#34;value\u0026#34;: \u0026#34;XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\u0026#34; }, \u0026#34;authorizations\u0026#34;: { \u0026#34;value\u0026#34;: [ { \u0026#34;principalId\u0026#34;: \u0026#34;XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\u0026#34;, \u0026#34;principalIdDisplayName\u0026#34;: \u0026#34;Sentinel_IAC_SG\u0026#34;, \u0026#34;roleDefinitionId\u0026#34;: \u0026#34;b24988ac-6180-42a0-ab88-20f7382dd24c\u0026#34; }, { \u0026#34;principalId\u0026#34;: \u0026#34;XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\u0026#34;, \u0026#34;principalIdDisplayName\u0026#34;: \u0026#34;SOC_L1_SG\u0026#34;, \u0026#34;roleDefinitionId\u0026#34;: \u0026#34;3e150937-b8fe-4cfb-8069-0eaf05ecd056\u0026#34; }, { \u0026#34;principalId\u0026#34;: \u0026#34;XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\u0026#34;, \u0026#34;principalIdDisplayName\u0026#34;: \u0026#34;SOC_L2_SG\u0026#34;, \u0026#34;roleDefinitionId\u0026#34;: \u0026#34;ab8e14d6-4a74-4a29-9ba8-549422addade\u0026#34; }, { \u0026#34;principalId\u0026#34;: \u0026#34;XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\u0026#34;, \u0026#34;principalIdDisplayName\u0026#34;: \u0026#34;SOC_L2_SG\u0026#34;, \u0026#34;roleDefinitionId\u0026#34;: \u0026#34;87a39d53-fc1b-424a-814c-f7e04687dc9e\u0026#34; }, { \u0026#34;principalId\u0026#34;: \u0026#34;XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\u0026#34;, \u0026#34;principalIdDisplayName\u0026#34;: \u0026#34;Executives_SG\u0026#34;, \u0026#34;roleDefinitionId\u0026#34;: \u0026#34;acdd72a7-3385-48ef-bd42-f606fba81ae7\u0026#34; } ] } } } Image of Azure Portal editing a template Click Save when you finish copying the script.\nYou\u0026rsquo;ll be sent back to the previous page, but this time, you will have all the parameters filled in from the template lets have a quick overview, so you will understand what you are deploying:\nImage of Azure Portal editing a template Subscription: The Subscription where we deployed our Log Analytics and Sentinel. Region: The Region where we deployed our Log Analytics and Sentinel Msp Offer Name: The name of the Managed service provider name, you will use it later, choose a good name Msp Offer Description: The description of the Managed service provider Managed By Tenant Id: The Tenant Id you delegate permissions to. Authorizations: The Identities from the Managed services Tenant, and the RBAC roles they will get. Resource Group: The name of the Resource Group we want to delegate permissions to. Now, you can press on Review + Create button. If all validations pass, you\u0026rsquo;ll be able to deploy the template and successfully onboard your resource group.\nImage of Azure Portal editing a template Deploy Using PowerShell This time we will have also provide the TemplateParameterFile. We use the same New-AzResourceGroupDeployment cmdlet.\nNew-AzResourceGroupDeployment -ResourceGroupName \u0026#34;Sentinel-RG\u0026#34; -TemplateFile .\\rgDelegatedResourceManagement.json -TemplateParameterFile .\\rgDelegatedResourceManagement.parameters.json MAKE SURE YOU ARE CONNECTED TO THE RELEVANT TENANT AND SUBSCRIPTION BEFORE DEPLOYMENT!\nVerify your deployment To verify you deployed everything as expected, you have a few things you can do.\nIt can take up to 10 mins after the deployment completed to see the changes\nFrom the manged tenant From the manged tenant, you can navigate to Service providers. In the Service providers, you can navigate to Delegations and see all the delegations in your tenant.\nFrom the central tenant From the central tenant, you can navigate to My Customers. In the My Customers page, you can navigate to Delegations or Customers and see all the delegations in your tenant.\nSummary Azure Lighthouse ease the management of a multi-tenancy environment, and with Microsoft adding a lot of new features for Multiple Azure Sentinel workspaces, Azure Lighthouse is a must.\nAfter reading this post, you will know more about Azure Lighthouse and the benefit of using it. You will know how to plan a successful deployment and, of course, how to deploy it.\n","permalink":"//localhost:8080/posts/deploy-azure-sentinel-to-a-multi-tenancy-environment/deploy-azure-sentinel-to-a-multi-tenancy-environment/","tags":["Microsoft Sentinel","PowerShell","Azure"],"title":"Deploy Azure Sentinel to a multi-tenancy environment"},{"categories":["Cloud Security","Microsoft Sentinel"],"content":"Automate Azure Sentinel Deployment Azure Sentinel is a scalable, cloud-native, security information event management (SIEM) and security orchestration automated response (SOAR) solution. Azure Sentinel delivers intelligent security analytics and threat intelligence across the enterprise, providing a single solution for alert detection, threat visibility, proactive hunting, and threat response.\nLike any other cloud services, you can automate most of the Azure Sentinel deployment and configuration. And in this post, you will learn how to automate the core components of Azure Sentinel.\nPrerequisites Before we start, there are few global prerequisites that you need to meet:\nActive Azure Subscription, if you don\u0026rsquo;t have one, create a free account before you begin. Contributor permissions to the subscription. PowerShell V7, if you don\u0026rsquo;t have it installed, install it from the GitHub Repository . Azure Sentinel Automation tools Bringing the right set of tools to the mission allows you to provide the best solution in the shortest time. Before you begin in your journey, spend some time getting familiar with the following tools:\nPowerShell V7 PowerShell V7 is a cross-platform task automation and configuration management framework, consisting of a command-line shell and scripting language. Make sure you installed it on your system.\nAz Module Azure PowerShell Az module is a PowerShell module for interacting with Azure. Az offers shorter commands, improved stability, and cross-platform support.\nTo install it, you run the following command:\nInstall-Module az -AllowClobber -Scope CurrentUser AzSentinel Module AzSentinel is a module built by Wortel, and it will help us automate a few of the processes.\nYou install the AzSentinel Module with the following command:\nInstall-Module AzSentinel -Scope CurrentUser -Force Splatting In most of the code examples, I use \u0026ldquo;splatting\u0026rdquo; to pass the parameters. Splatting makes your commands shorter and easier to read. You can read more about it here. Connect to Azure with PowerShell You also need to set up a session to Azure from PowerShell, and you can create one with the Az module.\nYou need to get your Tenant ID and Subscription ID from the Azure Portal.\nWith this information, you can use the Connect-AzAccount to create a session with Azure:\n$TenantID = \u0026#39;XXXX-XXXX-XXXX-XXXX-XXXX\u0026#39; $SubscriptionID = \u0026#39;XXXX-XXXX-XXXX-XXXX\u0026#39; Connect-AzAccount -TenantId $TenantID -SubscriptionId $SubscriptionID You can now interact with Azure from PowerShell and start your journey to automate Azure Sentinel.\nA Step by Step To a Fully Automated Deployment Every automation process starts with multiple small automated processes. In this post, you will learn how to provision the following components with PowerShell:\nResource Group Log Analytics Azure Sentinel Saved Queries Hunting Queries Alert Rules Playbooks Workbooks Azure Log Analytics, Azure Sentinel, and Logic Apps are all paid services.\nEach component is a piece in the puzzle that builds a fully up and running Azure Sentinel, ready to monitor every environment.\nResource Group The resource group is a container that holds related resources for an Azure solution. In Azure, you logically group related resources to deploy, manage, and maintain them as a single entity. With the New-AzResourceGroup, you can create a new resource group.\nEvery resource in Azure requires a deployment location. The location is referring to the Datacenter region. In this guide, I will use the West Europe region.\n$Parms = @{ Name = \u0026#34;Sentinel-RG\u0026#34; Location = \u0026#34;WestEurope\u0026#34; } New-AzResourceGroup @Parms Log Analytics Log Analytics is a service that helps you collect and analyze data generated by resources in your cloud and on-premises environments. It gives you real-time insights using integrated search and custom dashboards to readily analyze millions of records across all of your workloads and servers regardless of their physical location.\nAzure Sentinel run on Log Analytics workspace, and use it to store all security-related data. With that said, Log Analytics is the first resource we need to provision.\nTo create a new Log Analytics workspace, you can use the New-AzOperationalInsightsWorkspace.\n$Parms = @{ ResourceGroupName = \u0026#34;Sentinel-RG\u0026#34; Name = \u0026#34;Saggiehaim-Sentinel-WS\u0026#34; Location = \u0026#34;WestEurope\u0026#34; } New-AzOperationalInsightsWorkspace @Parms Azure Sentinel After provisioning Log Analytics, you can continue and on-board Azure Sentinel.\nUse the Set-AzSentinel to provision the Log Analytics Workspace:\n$Parms = @{ SubscriptionId = $SubscriptionID WorkspaceName = \u0026#34;Saggiehaim-Sentinel-WS\u0026#34; } Set-AzSentinel @Parms Azure Sentinel Saved Queries Until this point, you only provisioned \u0026ldquo;Infrastructure.\u0026rdquo; By enabling Azure Sentinel, you can now start the \u0026ldquo;configuration\u0026rdquo; part, and add content to your Azure Sentinel.\nWhen we talk about SIEM and monitoring big data as an essential skill to have, it is the ability to extract the relevant information from the sea of data.\nIn Sentinel, you use the Kusto Language (KQL). With KQL, you can run queries inside Log Analytics, and write Sentinel Alerts rules, Hunting rules, Workbooks, and more.\nSome queries can be significant and complex, and you don\u0026rsquo;t want to write to them again and again. You can save your time and keep your queries inside Log Analytics and use them on demand.\nYou can organize your saved query inside folders by using the Category switch.\nYou can push saved queries with the New-AzOperationalInsightsSavedSearch command:\n$query = @\u0026#34; // Number of requests // Count the total number of calls across all APIs in the last 24 hours. //Total number of call per resource ApiManagementGatewayLogs | where TimeGenerated \u0026gt; ago(1d) | summarize count(CorrelationId) by _ResourceId \u0026#34;@ $param = @{ ResourceGroupName = \u0026#34;sentinel-rg\u0026#34; WorkspaceName = \u0026#34;Saggiehaim-Sentinel-WS\u0026#34; SavedSearchId = \u0026#34;NumberofAPICallsPerResource\u0026#34; ## Name of the saved query DisplayName = \u0026#34;Number of API calls per resource\u0026#34; ## The name of the Folder your want to store your saved query Category = \u0026#34;API Managment\u0026#34; Query = $query Version = 1 Force = $true } New-AzOperationalInsightsSavedSearch @param Another method is to use JSON or YAML files to hold the information. This method is the recommended approach. It allows you to manage your content inside a git repository, manage versions, and use it in your automated process.\nHere is an example of a JSON file:\n{ \u0026#34;SavedSearchId\u0026#34;: \u0026#34;NumberofAPICallsPerResource\u0026#34;, \u0026#34;DisplayName\u0026#34;: \u0026#34;Number of API calls per resource\u0026#34;, \u0026#34;Category\u0026#34;: \u0026#34;API Managment\u0026#34;, \u0026#34;Query\u0026#34;: \u0026#34; // Number of requests // Count the total number of calls across all APIs in the last 24 hours. //Total number of call per resource ApiManagementGatewayLogs | where TimeGenerated \u0026gt; ago(1d) | summarize count(CorrelationId) by _ResourceId\u0026#34;, \u0026#34;Version\u0026#34;: \u0026#34;1\u0026#34; } Now you need to adjust the script accordingly:\n$SavedQuery = Get-Content .\\NumberofAPICallsPerResource.json | ConvertFrom-Json $param = @{ ResourceGroupName = \u0026#34;sentinel-rg\u0026#34; WorkspaceName = \u0026#34;Saggiehaim-Sentinel-WS\u0026#34; SavedSearchId = $SavedQuery.SavedSearchId DisplayName = $SavedQuery.DisplayName Category = $SavedQuery.Category Query = $SavedQuery.Query Version = $SavedQuery.Version Force = $true } New-AzOperationalInsightsSavedSearch @param Hunting Queries Hunting queries help you find suspicious activity in your environment. While many are likely to return legitimate activity or potentially malicious activity, they can guide your hunting. If you are confident with the results after running these queries, you could consider turning some or all of them into Azure Sentinel Analytics to alert on.\nTo can create Hunting rules, you can use the `Import-AzSentinelHuntingRule\u0026rsquo; cmdlet.\nFirst, you create a JSON file containing your hunting rule base on this schema:\n{ \u0026#34;analytics\u0026#34;: [ { \u0026#34;DisplayName\u0026#34;: \u0026#34;Example of Hunting Rule\u0026#34;, \u0026#34;Description\u0026#34;: \u0026#34;This the description of the query.\u0026#34;, \u0026#34;Query\u0026#34;: \u0026#34; // sample query Syslog | limit 10 \u0026#34;, \u0026#34;Tactics\u0026#34;: [ \u0026#34;Persistence\u0026#34;, \u0026#34;Execution\u0026#34; ] } ] } Now, you can import the Hunting Query into your Azure Sentinel:\n$Parms = @{ WorkspaceName = \u0026#34;Saggiehaim-Sentinel-WS\u0026#34; SettingsFile = .\\exampleHuntingRule.json } Import-AzSentinelHuntingRule @Parms Alerts Rules Alert rules are queries that defined to trigger incidents. You use them to raise incidents when security incidents happen in your environment. Just like Hunting queries, you store your alerts rules in a JSON file.\n{ \u0026#34;analytics\u0026#34;: [ { \u0026#34;displayName\u0026#34;: \u0026#34;Suspicios activities in Office365\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Rare office operations executed on one or more mailboxes.\u0026#34;, \u0026#34;severity\u0026#34;: \u0026#34;High\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;query\u0026#34;: \u0026#34;let timeframe = 1d; OfficeActivity\u0026#34;, \u0026#34;queryFrequency\u0026#34;: \u0026#34;5H\u0026#34;, \u0026#34;queryPeriod\u0026#34;: \u0026#34;5H\u0026#34;, \u0026#34;triggerOperator\u0026#34;: \u0026#34;GreaterThan\u0026#34;, \u0026#34;triggerThreshold\u0026#34;: 5, \u0026#34;suppressionDuration\u0026#34;: \u0026#34;6H\u0026#34;, \u0026#34;suppressionEnabled\u0026#34;: false, \u0026#34;tactics\u0026#34;: [ \u0026#34;Persistence\u0026#34;, \u0026#34;LateralMovement\u0026#34;, \u0026#34;Collection\u0026#34; ], \u0026#34;playbookName\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;aggregationKind\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;createIncident\u0026#34;: true, \u0026#34;groupingConfiguration\u0026#34;: { \u0026#34;GroupingConfigurationEnabled\u0026#34;: true, \u0026#34;reopenClosedIncident\u0026#34;: true, \u0026#34;lookbackDuration\u0026#34;: \u0026#34;PT6H\u0026#34;, \u0026#34;entitiesMatchingMethod\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;groupByEntities\u0026#34;: [ \u0026#34;Account\u0026#34;, \u0026#34;Ip\u0026#34;, \u0026#34;Host\u0026#34;, \u0026#34;Url\u0026#34; ] } } ] } You can use the Import-AzSentinelAlertRule to import your Alert Rules:\n$Parms = @{ WorkspaceName = \u0026#34;Saggiehaim-Sentinel-WS\u0026#34; SettingsFile = .\\exampleAlertRule.json } Import-AzSentinelAlertRule @Parms Playbooks and Workbooks Playbooks use Azure Logic Apps to respond to incidents automatically. Logic Apps are a native resource in ARM, and therefore we can automate its deployment with ARM templates.\nAzure Sentinel allows you to create custom workbooks across your data. Workbooks visualize and monitor the data and provide versatility in creating custom dashboards.\nSame as Playbooks, Workbooks are native resources in Azure and use ARM templates\nYou can find examples to Playbooks and Workbooks on the Azure Sentinel Community repository Because this is an ARM template deployment, you deploy it to the Resource group and not to the Log Analytics Workspace. Use the New-AzResourceGroupDeployment cmdlet to deploy either Workbook or Playbook:\n$Parms = @{ ResourceGroupName = \u0026#34;Sentinel-RG\u0026#34; TemplateFile = .\\exampleTemplate.json } New-AzResourceGroupDeployment @Parms Take into account that the deployment will fail if a workbook with the same name already exists.\nPlan first, Succeed later You\u0026rsquo;ve learned how to provision each component and how to deploy your content, now it\u0026rsquo;s time to prepare the content and learn how to connect securely to Azure to automate the deployment from start to end correctly.\nFolder Structure First, I want to explain about folder structure. When you have different files, I like to organize them in folders, so it\u0026rsquo;s easy to manage them and use them in the automation process. In this case, we have five different resources, so, I recommend the following structure:\nSentinel Automation ├───AlertsRules ├───HuntingRules ├───Playbooks ├───SavedQuery └───Workbooks The example above allows us to match the right files to the right cmdlets. For example, to import all your AlertRules, you can do the following:\n$AlertRules = Get-Item \u0026#34;.\\AlertsRules\\*\u0026#34; -Filter \u0026#39;*.json\u0026#39; foreach ($rule in $AlertRules) { try { $Parms = @{ WorkspaceName = \u0026#34;Saggiehaim-Sentinel-WS\u0026#34; SettingsFile = .\\exampleAlertRule.json SubscriptionId = $SubscriptionId Confirm = $false } Import-AzSentinelAlertRule @Parms } catch { $ErrorMessage = $_.Exception.Message Write-Error \u0026#34;Unable to import Alert Rule: $($ErrorMessage)\u0026#34; } } Connecting Securely To Azure Another important topic is how we authenticate to Azure securely. If you paid attention when you created a session with Azure for the first time, using your credential, it asked you to sign in with one timed password in the Microsoft portal. One time passwords are not the behavior we want when we automate things, as it required human intervention. But this is also the expected behavior from a security point of view, right?\nTo overcome this, you need to use an App Registration Account. If you don\u0026rsquo;t know how to create one, you can follow this guide. A little tip: Keeping the password in plain text in scripts is not so safe, so it’s better to secure it. The best approach is to use a certificate (in the guide, you will learn how to do it). But if you still want to go without a certificate, you can always protect the password. You convert the password to secure string and save it to a file (I recommend changing the ACL for the file).\n$CredsFile = \u0026#34;\u0026lt;Path\u0026gt;\\PasswordFile.txt\u0026#34; Read-Host -AsSecureString | ConvertFrom-SecureString | Out-File $CredsFile Now you can connect to Azure more securely.\n$TenantID = \u0026#39;XXXX-XXXX-XXXX-XXXX-XXXX\u0026#39; $SubscriptionID = \u0026#39;XXXX-XXXX-XXXX-XXXX\u0026#39; $appId = \u0026#39;XXXX-XXXX-XXXX-XXXX\u0026#39; $securePassword = Get-Content $CredsFile | ConvertTo-SecureString $credential = New-Object System.Management.Automation.PSCredential ( $AppId, $securePassword ) $connectAzParams = @{ ServicePrincipal = $true SubscriptionId = $SubscriptionId Tenant = $TenantId Credential = $credential } try { Connect-AzAccount @connectAzParams } catch { $ErrorMessage = $_.Exception.Message Write-Error \u0026#34;Unable to connect to Azure: $($ErrorMessage)\u0026#34; exit } Summary Azure Sentinel is the \u0026ldquo;next-gen\u0026rdquo; SIEM in the cloud, and if you are into security, Mastering Azure Sentinel is a must. Combining the cloud capabilities, with a SIEM that is managed by code, gives you endless possibilities to protect your critical assets. In this post, you have learned about Azure Sentinel, the components, and how to automate a deployment securely. You learned how to sort your content and push it to your Azure Sentinel and manage it with ease. Hopefully, this post will help you start with Azure Sentinel and help automate the deployment and maintenance.\n","permalink":"//localhost:8080/posts/automate-azure-sentinel-deployment/automate-azure-sentinel-deployment/","tags":["Microsoft Sentinel","PowerShell","Azure"],"title":"Automate Azure Sentinel Deployment"},{"categories":["PowerShell","Azure"],"content":"PowerShell is the Automator\u0026rsquo;s best friend. I automate everything with PowerShell, and you can also. When it comes to Azure, I can\u0026rsquo;t remember the last time I created a resource in the Portal. I either use PowerShell or IaC to provision resources or modify them.\nIn this post, you will learn how to set up a session with Azure to start to interact with Azure Resources.\nPrerequisites Before we start, there are few global prerequisites that you need to meet:\nActive Azure Subscription, if you don\u0026rsquo;t have one, create a free account before you begin. Reader permissions to the subscription. PowerShell V7, if you don\u0026rsquo;t have it installed, install it from the GitHub Repository. Getting to know the tools PowerShell V7 PowerShell V7 is a cross-platform task automation and configuration management framework, consisting of a command-line shell and scripting language. Make sure you installed it on your system.\nAz Module Azure PowerShell Az module is a PowerShell module for interacting with Azure. Az offers shorter commands, improved stability, and cross-platform support.\nTo install it, you run the following command:\nInstall-Module az -AllowClobber -Scope CurrentUser Splatting In most of the code examples, I use \u0026ldquo;splatting\u0026rdquo; to pass the parameters. Splatting makes your commands shorter and easier to read. You can read more about it here. Connect to Azure with PowerShell You also need to set up a session to Azure from PowerShell, and you can create one with the Az module.\nYou need to get your Tenant ID and Subscription ID from the Azure Portal.\nWith this information, you can use the Connect-AzAccount to create a session with Azure:\n$TenantID = \u0026#39;XXXX-XXXX-XXXX-XXXX-XXXX\u0026#39; $SubscriptionID = \u0026#39;XXXX-XXXX-XXXX-XXXX\u0026#39; Connect-AzAccount -TenantId $TenantID -SubscriptionId $SubscriptionID You can now interact with Azure from PowerShell and start your journey to automate everything.\n","permalink":"//localhost:8080/posts/how-to-connect-to-azure-with-powershell/how-to-connect-to-azure-with-powershell/","tags":["PowerShell","Azure","Automation"],"title":"How to Connect to Azure With Powershell"},{"categories":["Guide","PowerShell"],"content":"PowerShell can run background jobs with the Start-Job cmdlet. Most of the cmdlet also have -AsJob switch to instantly run the cmdlet as a background job. Each job runs a cmdlet in the background without interacting with the current session. This gives us the ability to perform an action on many targets quicker. This also come with some “downsides”, it’s resource consuming (depend on how many tasks running in the background) as each job is a separated process.\nWith this in mind, another parallel solution was needed. Threadjob module extends the existing PowerShell BackgroundJob, providing faster and lighter resource consuming while running in the current PowerShell session.\nI choose to write about ThreadJob because this is the adopted solution by the PowerShell Team, but you may find other modules doing the same.\nWhy background jobs? By default, PowerShell does synchronous execution. Which means that PowerShell will execute one line of code at a time. With background jobs, we can run different lines of code at the same time (Asynchronous).\nFor the most parts, we’ll run background jobs each time we have repetitive tasks for numerous targets. For example, changing the Active Directory manager attribute for many users, creating a mailbox for list of users, or running the same cmdlet on many servers.\nStart-Job Or Start-ThreadJob? The answer to this question is very simple and straightforward:\nStart-Threadjob – When we want to run tasks in the same context. Has better performance.\nStart-Job – When we need to run something out of the process context. For example, updating PowerShell help in the background. More resources used.\nBackground Jobs with Start-Job The Start-Job cmdlet will start a background job. We can use it in the following way:\n## Start a new Job Start-Job -Name \u0026#34;Test Job\u0026#34; -ScriptBlock {Write-host \u0026#34;This is a Simple Job\u0026#34;} ## Get Job status Get-Job ## Receive Job Get-Job | Receive-Job PowerShell Session Showing Background Job with Start-Job Additionally, as I said in the beginning, Some cmdlet has -Asjob switch. Use Get-Help to check if your cmdlet has the -Asjob switch.\n## Use -AsJob switch to start a new Job Get-WmiObject win32_computersystem model -AsJob ## Get Job status Get-Job ## Receive Job output Get-Job | Receive-Job PowerShell Session Showing Background Job with -AsJob Switch Update: Thanks to @jkavanagh58 who raised the option to find cmdlet with -Asjob switch with the Get-Command cmdlet.\nGet-Command -ParameterName AsJob Background Jobs with Start-ThreadJob While Threadjob doesn’t have -AsThread switch. Everything else is just the same. We use the Start-Threadjob cmdlet and manage the rest same as Start-Job. If you don’t use the latest PowerShell Core, you’ll need to install the module first:\nInstall-Module -Name ThreadJob -Scope CurrentUser Afterwards, we will be able to use the Start-ThreadJob cmdlet:\n## Start a new Thread Start-ThreadJob -Name \u0026#34;Test Thread\u0026#34; -ScriptBlock {Write-Host \u0026#34;This is a Simple Thread Job\u0026#34;} ## Get Job status Get-Job ## Receive Job output Get-Job | Receive-Job PowerShell Session Showing Background Job with Start-ThreadJob Start-Job vs Start-ThreadJob – Performance We learn how to use background jobs and why. Now I want to show you the performance differences.\nMeasure-Command {1..10 | ForEach-Object {sleep 3}} | Select-Object Totalseconds This code will pause the shell for 3 seconds ten times. I’ll run the same code three times with the following conditions:\nAs is with no background jobs With Start-Job With Start-ThreadJob During the tests, we’ll see the difference in each condition. The impact on the operating system and how long it took to execute.\nNo Background jobs Starting with the obvious, the default behavior when we don’t use any background job.\nPowerShell Session Showing measuring a simple iteration with no background jobs. Running ten times and pausing for three seconds each time, set the benchmark to 30 seconds as expected.\nStart-Job Performance Now, running with the native Start-Job, we can see the increased performance as it took only 5.4 seconds to finish.\nPowerShell Session Showing measuring a simple iteration with Process explorer. However, with each iterate, a new PowerShell process started. What will happen if we iterate 1 million times?\nStart-ThreadJob Performance Last, we use Start-Threadjob. This time finishing in 0.245 seconds!\nPowerShell Session Showing measuring a simple iteration with Process explorer. Opposite to the Start-Job method, this time, we stayed in the same process.\nConclusion While using background jobs in the shell is not a common act. It’s not the case when writing scripts. Some times we do care about the performance aspects, and Background jobs can help us. We saw both methods and talked about when we use each method. Now it’s your time to get familiar with the solutions and speed up your scripts!\nHope you enjoyed this post!\n","permalink":"//localhost:8080/posts/background-jobs-start-threadjob-vs-start-job/background-jobs-start-threadjob-vs-start-job/","tags":["PowerShell"],"title":"Background Jobs Start Threadjob vs Start Job"},{"categories":null,"content":"","permalink":"//localhost:8080/search/_index.es/","tags":null,"title":""},{"categories":null,"content":"","permalink":"//localhost:8080/search/_index.fr/","tags":null,"title":""},{"categories":null,"content":"","permalink":"//localhost:8080/search/_index.hi/","tags":null,"title":""},{"categories":null,"content":"","permalink":"//localhost:8080/search/_index.jp/","tags":null,"title":""},{"categories":null,"content":"","permalink":"//localhost:8080/search/_index.pl/","tags":null,"title":""},{"categories":null,"content":"","permalink":"//localhost:8080/search/_index.ru/","tags":null,"title":""},{"categories":null,"content":"","permalink":"//localhost:8080/search/_index.zh-cn/","tags":null,"title":""}]